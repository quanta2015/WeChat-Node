#!/usr/bin/env node


var config = require('../config');
var dbHelper = require('../db/dbHelper');
var app = require('../app');
var debug = require('debug')('chat:server');
var http = require('http');
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);


var server = http.createServer(app);
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);



var roomInfo = {};
var onlineList = [];
var io = require('socket.io').listen(server);


io.on('connection', function(socket) {
  var usr;

  //加入聊天室
  socket.on('online', function(uid) {
    usr = uid;
    socket.join(usr);
    if ( onlineList.indexOf(uid) === -1) {
      onlineList.push(uid);
    }
    console.log(usr + ' online...');
  });

  // 处理用户消息
  socket.on('message', function (uid,fid,msg) {

    var type;
    // 判断接受方是否在线
    if (onlineList.indexOf(fid) === -1) {
      //不在线将消息保存到数据库
      type = config.site.OFFLINE;
      io.to(uid).emit('msg', uid, fid, msg);
    }else{
      type = config.site.ONLINE;
      io.to(fid).emit('msg', uid, fid, msg);
      io.to(uid).emit('msg', uid, fid, msg);
    }

    var data = {
      "uid":uid,
      "from":uid,
      "to":fid,
      "type":type,
      "msg":msg
    };

    dbHelper.addMsg(data, function (success, data) {
      console.log(uid + ' -> ' + fid + 'msg saved...');
    })

  });

  //非正常下线
  socket.on('disconnect', function() {
    // 从在线名单中移除
    var index = onlineList.indexOf(usr);
    if (index !== -1) {
      onlineList.splice(index,1);
      socket.leave(usr);
    }
    console.log(usr + ' offline...');
  });

  //正常下线
  socket.on('leave', function() {
    socket.emit('disconnect');
  });

});



function normalizePort(val) {
  var port = parseInt(val, 10);
  if (isNaN(port)) {
    // named pipe
    return val;
  }
  if (port >= 0) {
    // port number
    return port;
  }
  return false;
}


function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
   debug('Listening on ' + bind);
}
